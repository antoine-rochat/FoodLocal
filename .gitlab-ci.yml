stages:
  - build
  - test
  - release
  - deploy

variables:
  # We build and run test directly after the build of the test image
  CONTAINER_TEST_IMAGE_API: gcr.io/${GC_PROJECT_ID}/api:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE_API: gcr.io/${GC_PROJECT_ID}/api:latest
  CONTAINER_TEST_IMAGE_FRONTEND: gcr.io/${GC_PROJECT_ID}/frontend:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE_FRONTEND: gcr.io/${GC_PROJECT_ID}/frontend:latest

#############
### BUILD ###
#############
build-api:
  stage: build
  image: docker:stable
  services:
    - docker:dind

  script:
    - docker login -u _json_key -p "${GC_KEY}" https://gcr.io
    - docker build --pull -t $CONTAINER_TEST_IMAGE_API ./API/
    - docker push $CONTAINER_TEST_IMAGE_API
  only:
    - prod
    - master
    - API

build-frontend:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u _json_key -p "${GC_KEY}" https://gcr.io
    - docker build --pull -t $CONTAINER_TEST_IMAGE_FRONTEND ./FrontEnd
    - docker push $CONTAINER_TEST_IMAGE_FRONTEND
  only:
    - 10-site-web-creation-des-pages-principales-carte
    - prod
    - master

############
### TEST ###
############
test-api:
  stage: test
  image: node:9-alpine
  services:
    - mongo:latest
  script:
    - cd ./API
    - npm i npm@latest -g
    - npm i
    - npm test
  only:
    - prod
    - master
    - 10-site-web-creation-des-pages-principales-carte

#test-frontend:
#  stage: test
#  image: node:9-alpine
#    services:
#      - mongo:latest
#    script:
#      - cd ./FrontEnd
#      - npm i npm@latest -g
#      - npm i
#      - npm test
#    only:
#      - prod
#      - master
#      - API


## Test quality
code_quality-api:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - cd ./API
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: [gl-code-quality-report.json]
  only:
    - prod
    - master

## container_scanning

## dependency_scanning

## licence manager

## sast

###############
### RELEASE ###
###############
release-image-api:
  stage: release
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u _json_key -p "${GC_KEY}" https://gcr.io
    - docker pull $CONTAINER_TEST_IMAGE_API
    - docker tag $CONTAINER_TEST_IMAGE_API $CONTAINER_RELEASE_IMAGE_API
    - docker push $CONTAINER_RELEASE_IMAGE_API
  only:
    - prod


# Need probably 2 docker file (test and prod)
release-image-frontend:
  stage: release
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u _json_key -p "${GC_KEY}" https://gcr.io
    - docker pull $CONTAINER_TEST_IMAGE_FRONTEND
    - docker tag $CONTAINER_TEST_IMAGE_FRONTEND $CONTAINER_RELEASE_IMAGE_FRONTEND
    - docker push $CONTAINER_RELEASE_IMAGE_FRONTEND
  only:
    - prod

##############
### DEPLOY ###
##############
deploy-api:
  stage: deploy
  image: google/cloud-sdk:alpine
  script:
    - gcloud components install kubectl
    - gcloud auth activate-service-account --key-file=<(echo "${GC_KEY}")
    - gcloud container clusters get-credentials ${GC_CLUSTER_ID} --zone ${GC_ZONE} --project ${GC_PROJECT_ID}
    - kubectl apply -f api-service.yml
    - kubectl apply -f api-deployment.yml
  only:
    - prod

deploy-frontend:
  stage: deploy
  image: google/cloud-sdk:alpine
  script:
    - gcloud components install kubectl
    - gcloud auth activate-service-account --key-file=<(echo "${GC_KEY}")
    - gcloud container clusters get-credentials ${GC_CLUSTER_ID} --zone ${GC_ZONE} --project ${GC_PROJECT_ID}
    - kubectl apply -f frontend-service.yml
    - kubectl apply -f frontend-deploy.yml
  only:
    - prod