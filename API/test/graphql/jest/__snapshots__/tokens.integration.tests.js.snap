// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should delete a user 1`] = `
Object {
  "data": Object {
    "deleteUser": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Jérémie",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "firstname": "Antoine",
          "lastname": "Rochaille",
        },
      ],
      "image": "ceci est une image encodée en base64!",
      "isAdmin": false,
      "lastname": "Chaton",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should fail deleting a user because invalid id received (too long) 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should fail deleting a user because invalid id received (too short) 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should fail deleting a user because unknown id received 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should not delete a user because not authenticated 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
  "errors": Array [
    [GraphQLError: Sorry, you need to be authenticated to do that.],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should not delete a user because not authenticated as yourself 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
  "errors": Array [
    [GraphQLError: You can't modify information of another user than yourself!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing emailValidationTokens() should get all emailValidationtokens 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "email": "jerem@user.ch",
        "emailValidated": false,
        "firstname": "Jérémie",
        "followingProducers": Array [
          Object {
            "email": "antoine@paysan.ch",
            "emailValidated": false,
            "firstname": "Antoine",
            "image": "Ceci est une image encodée en base64!",
            "lastname": "Rochaille",
            "phoneNumber": "0761435196",
            "rating": Object {
              "nbRatings": 3,
              "rating": 3.3333333333333335,
            },
          },
        ],
        "image": "ceci est une image encodée en base64!",
        "isAdmin": false,
        "lastname": "Chaton",
      },
      Object {
        "email": "loyse@user.ch",
        "emailValidated": false,
        "firstname": "Loyse",
        "followingProducers": Array [
          Object {
            "email": "antoine@paysan.ch",
            "emailValidated": false,
            "firstname": "Antoine",
            "image": "Ceci est une image encodée en base64!",
            "lastname": "Rochaille",
            "phoneNumber": "0761435196",
            "rating": Object {
              "nbRatings": 3,
              "rating": 3.3333333333333335,
            },
          },
        ],
        "image": null,
        "isAdmin": false,
        "lastname": "Hug",
      },
    ],
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should fail updating a user because invalid id received (too long) 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should fail updating a user because invalid id received (too short) 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should fail updating a user because unknown id received 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: The received id is not in the database!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should not update a user because missing mendatory information (id) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$user" got invalid value { firstname: "Loyse", lastname: "Hug" }; Field value.id of required type ID! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should not update a user because not authenticated 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: Sorry, you need to be authenticated to do that.],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should not update a user because not authenticated as yourself 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: You can't modify information of another user than yourself!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should not update the user image because image not received (undefined) 1`] = `
Object {
  "data": Object {
    "updateUser": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Loyse",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "firstname": "Antoine",
          "lastname": "Rochaille",
        },
      ],
      "image": "ceci est une image encodée en base64!",
      "isAdmin": false,
      "lastname": "Hug",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should update a user 1`] = `
Object {
  "data": Object {
    "updateUser": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Loyse",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "firstname": "Antoine",
          "lastname": "Rochaille",
        },
      ],
      "image": "ceci est une image encodée en base64!",
      "isAdmin": false,
      "lastname": "Hug",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should update the user image to null because null image received 1`] = `
Object {
  "data": Object {
    "updateUser": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Loyse",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "firstname": "Antoine",
          "lastname": "Rochaille",
        },
      ],
      "image": null,
      "isAdmin": false,
      "lastname": "Hug",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should fail getting a user by id because invalid id received (too long) 1`] = `
Object {
  "data": Object {
    "user": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should fail getting a user by id because invalid id received (too short) 1`] = `
Object {
  "data": Object {
    "user": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should fail getting a user by id because unknown id received 1`] = `
Object {
  "data": Object {
    "user": null,
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should get a user because not authenticated as administrator 1`] = `
Object {
  "data": Object {
    "user": null,
  },
  "errors": Array [
    [GraphQLError: Sorry, you need to be an administrator to do that.],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should get a user by id 1`] = `
Object {
  "data": Object {
    "user": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Jérémie",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "emailValidated": false,
          "firstname": "Antoine",
          "image": "Ceci est une image encodée en base64!",
          "lastname": "Rochaille",
          "phoneNumber": "0761435196",
          "rating": Object {
            "nbRatings": 3,
            "rating": 3.3333333333333335,
          },
        },
      ],
      "image": "ceci est une image encodée en base64!",
      "isAdmin": false,
      "lastname": "Chaton",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should not get a user because not authenticated 1`] = `
Object {
  "data": Object {
    "user": null,
  },
  "errors": Array [
    [GraphQLError: Sorry, you need to be authenticated to do that.],
  ],
}
`;
