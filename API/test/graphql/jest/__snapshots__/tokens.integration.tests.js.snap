// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing graphql resquest user MUTATION tokens Testing askNewEmailToken(email:String!, password: String!) should fail returning a new token for validate an email because email already validated 1`] = `
Object {
  "data": Object {
    "validateAnEmailToken": true,
  },
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing askNewEmailToken(email:String!, password: String!) should fail returning a new token for validate an email because email already validated 2`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: Email already validated!],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing askNewEmailToken(email:String!, password: String!) should fail returning a new token for validate an email because incorrect password received 1`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: Received password is not correct!],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing askNewEmailToken(email:String!, password: String!) should fail returning a new token for validate an email because unknown email received 1`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: There is no user corresponding to the email "unknown@mail.com"],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing login(email: String!, password:String!) should fail during login because incorrect password received 1`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: Received password is not correct!],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing login(email: String!, password:String!) should fail during login because unknown email received 1`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: There is no user corresponding to the email "unknown@mail.com"],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsProducer(newProducer: ProducerInputAdd!) should create a new producer and return a token 1`] = `
Object {
  "data": Object {
    "producer": Object {
      "description": null,
      "email": "ben@schop.ch",
      "emailValidated": false,
      "firstname": "benoit",
      "followers": Array [],
      "followingProducers": Array [],
      "image": null,
      "isAdmin": false,
      "isValidated": false,
      "lastname": "schop",
      "phoneNumber": null,
      "products": Array [],
      "rating": null,
      "salespoint": null,
      "website": null,
    },
  },
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsProducer(newProducer: ProducerInputAdd!) should fail creating a new producer and returning a token because missing mendatory information (email) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$producer" got invalid value { firstname: "benoit", lastname: "schop", password: "abcd1234" }; Field value.email of required type String! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsProducer(newProducer: ProducerInputAdd!) should fail creating a new producer and returning a token because missing mendatory information (firstname) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$producer" got invalid value { lastname: "schop", email: "ben@schop.ch", password: "abcd1234" }; Field value.firstname of required type String! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsProducer(newProducer: ProducerInputAdd!) should fail creating a new producer and returning a token because missing mendatory information (lastname) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$producer" got invalid value { firstname: "benoit", email: "ben@schop.ch", password: "abcd1234" }; Field value.lastname of required type String! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsProducer(newProducer: ProducerInputAdd!) should fail creating a new producer and returning a token because missing mendatory information (password) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$producer" got invalid value { firstname: "benoit", lastname: "schop", email: "ben@schop.ch" }; Field value.password of required type String! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsUser(newUser: UserInputAdd!) should create a new user and return a token 1`] = `
Object {
  "data": Object {
    "user": Object {
      "email": "ben@schop.ch",
      "emailValidated": false,
      "firstname": "benoit",
      "followingProducers": Array [],
      "image": null,
      "isAdmin": false,
      "lastname": "schop",
    },
  },
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsUser(newUser: UserInputAdd!) should fail creating a new user and returning a token because missing mendatory information (email) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$user" got invalid value { firstname: "benoit", lastname: "schop", password: "abcd1234" }; Field value.email of required type String! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsUser(newUser: UserInputAdd!) should fail creating a new user and returning a token because missing mendatory information (firstname) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$user" got invalid value { lastname: "schop", email: "ben@schop.ch", password: "abcd1234" }; Field value.firstname of required type String! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsUser(newUser: UserInputAdd!) should fail creating a new user and returning a token because missing mendatory information (lastname) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$user" got invalid value { firstname: "benoit", email: "ben@schop.ch", password: "abcd1234" }; Field value.lastname of required type String! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing signUpAsUser(newUser: UserInputAdd!) should fail creating a new user and returning a token because missing mendatory information (password) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$user" got invalid value { firstname: "benoit", lastname: "schop", email: "ben@schop.ch" }; Field value.password of required type String! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing validateAnEmailToken(emailValidationToken: String!) should fail validating an email with received token because invalid token received 1`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: invalid token],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing validateAnEmailToken(emailValidationToken: String!) should fail validating an email with received token because no token received 1`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: jwt must be provided],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing validateAnEmailToken(emailValidationToken: String!) should fail validating an email with received token because token has been modified 1`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: invalid signature],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing validateAnEmailToken(emailValidationToken: String!) should fail validating an email with received token because token has expired 1`] = `
Object {
  "data": null,
  "errors": Array [
    [GraphQLError: Your token is expired. Please ask for a new one.],
  ],
}
`;

exports[`Testing graphql resquest user MUTATION tokens Testing validateAnEmailToken(emailValidationToken: String!) should validate an email with received token 1`] = `
Object {
  "data": Object {
    "validateAnEmailToken": true,
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should delete a user 1`] = `
Object {
  "data": Object {
    "deleteUser": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Jérémie",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "firstname": "Antoine",
          "lastname": "Rochaille",
        },
      ],
      "image": "ceci est une image encodée en base64!",
      "isAdmin": false,
      "lastname": "Chaton",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should fail deleting a user because invalid id received (too long) 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should fail deleting a user because invalid id received (too short) 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should fail deleting a user because unknown id received 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should not delete a user because not authenticated 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
  "errors": Array [
    [GraphQLError: Sorry, you need to be authenticated to do that.],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing deleteUser(userId: ID!) should not delete a user because not authenticated as yourself 1`] = `
Object {
  "data": Object {
    "deleteUser": null,
  },
  "errors": Array [
    [GraphQLError: You can't modify information of another user than yourself!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing emailValidationTokens() should get all emailValidationtokens 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "email": "jerem@user.ch",
        "emailValidated": false,
        "firstname": "Jérémie",
        "followingProducers": Array [
          Object {
            "email": "antoine@paysan.ch",
            "emailValidated": false,
            "firstname": "Antoine",
            "image": "Ceci est une image encodée en base64!",
            "lastname": "Rochaille",
            "phoneNumber": "0761435196",
            "rating": Object {
              "nbRatings": 3,
              "rating": 3.3333333333333335,
            },
          },
        ],
        "image": "ceci est une image encodée en base64!",
        "isAdmin": false,
        "lastname": "Chaton",
      },
      Object {
        "email": "loyse@user.ch",
        "emailValidated": false,
        "firstname": "Loyse",
        "followingProducers": Array [
          Object {
            "email": "antoine@paysan.ch",
            "emailValidated": false,
            "firstname": "Antoine",
            "image": "Ceci est une image encodée en base64!",
            "lastname": "Rochaille",
            "phoneNumber": "0761435196",
            "rating": Object {
              "nbRatings": 3,
              "rating": 3.3333333333333335,
            },
          },
        ],
        "image": null,
        "isAdmin": false,
        "lastname": "Hug",
      },
    ],
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should fail updating a user because invalid id received (too long) 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should fail updating a user because invalid id received (too short) 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should fail updating a user because unknown id received 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: The received id is not in the database!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should not update a user because missing mendatory information (id) 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$user" got invalid value { firstname: "Loyse", lastname: "Hug" }; Field value.id of required type ID! was not provided.],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should not update a user because not authenticated 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: Sorry, you need to be authenticated to do that.],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should not update a user because not authenticated as yourself 1`] = `
Object {
  "data": Object {
    "updateUser": null,
  },
  "errors": Array [
    [GraphQLError: You can't modify information of another user than yourself!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should not update the user image because image not received (undefined) 1`] = `
Object {
  "data": Object {
    "updateUser": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Loyse",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "firstname": "Antoine",
          "lastname": "Rochaille",
        },
      ],
      "image": "ceci est une image encodée en base64!",
      "isAdmin": false,
      "lastname": "Hug",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should update a user 1`] = `
Object {
  "data": Object {
    "updateUser": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Loyse",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "firstname": "Antoine",
          "lastname": "Rochaille",
        },
      ],
      "image": "ceci est une image encodée en base64!",
      "isAdmin": false,
      "lastname": "Hug",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing updateUser(user: UserInputUpdate!) should update the user image to null because null image received 1`] = `
Object {
  "data": Object {
    "updateUser": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Loyse",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "firstname": "Antoine",
          "lastname": "Rochaille",
        },
      ],
      "image": null,
      "isAdmin": false,
      "lastname": "Hug",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should fail getting a user by id because invalid id received (too long) 1`] = `
Object {
  "data": Object {
    "user": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should fail getting a user by id because invalid id received (too short) 1`] = `
Object {
  "data": Object {
    "user": null,
  },
  "errors": Array [
    [GraphQLError: Received user.id is invalid!],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should fail getting a user by id because unknown id received 1`] = `
Object {
  "data": Object {
    "user": null,
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should get a user because not authenticated as administrator 1`] = `
Object {
  "data": Object {
    "user": null,
  },
  "errors": Array [
    [GraphQLError: Sorry, you need to be an administrator to do that.],
  ],
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should get a user by id 1`] = `
Object {
  "data": Object {
    "user": Object {
      "email": "jerem@user.ch",
      "emailValidated": false,
      "firstname": "Jérémie",
      "followingProducers": Array [
        Object {
          "email": "antoine@paysan.ch",
          "emailValidated": false,
          "firstname": "Antoine",
          "image": "Ceci est une image encodée en base64!",
          "lastname": "Rochaille",
          "phoneNumber": "0761435196",
          "rating": Object {
            "nbRatings": 3,
            "rating": 3.3333333333333335,
          },
        },
      ],
      "image": "ceci est une image encodée en base64!",
      "isAdmin": false,
      "lastname": "Chaton",
    },
  },
}
`;

exports[`Testing graphql resquest user QUERY user Testing validateAnEmailToken(emailValidationToken: String!) should not get a user because not authenticated 1`] = `
Object {
  "data": Object {
    "user": null,
  },
  "errors": Array [
    [GraphQLError: Sorry, you need to be authenticated to do that.],
  ],
}
`;
