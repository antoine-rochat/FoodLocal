type Query {
	users: [User!]!
	user(userId: ID!) : User
}

type Mutation {
	addUser(user: UserInputAdd!): User!
	updateUser(user: UserInputUpdate!): User
	deleteUser(userId: ID!): User
}

type User implements Person {
	id: ID!
	firstname: String!
	lastname: String!
	email: String!
	password: String!
	image: String # fixme: faudra l'encoder en base64
	followingProducers:[Producer!]!
	emailValidated: Boolean!
	isAdmin: Boolean!
}

input UserInputAdd {
	# id: ID!
	firstname: String!
	lastname: String!
	email: String!
	password: String!
	image: String # fixme: faudra l'encoder en base64
	# followingProducersIds:[Producer!]!
	# emailValidated: Boolean!
	# isAdmin: Boolean! # ne peut pas être modifié par le client
}

input UserInputUpdate {
	id: ID!
	firstname: String!
	lastname: String!
	email: String!
	password: String!
	image: String # faudra l'encoder en base64
	followingProducersIds:[ProducerInputUpdate!]  # pas obligatoire si vide
	# emailValidated: Boolean!
	# isAdmin: Boolean! # ne peut pas être modifié par le client
}
