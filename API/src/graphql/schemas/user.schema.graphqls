type Query {
	# Retourne tous les utilisateurs de la base de données.
	users: UserConnection! @connection

	# Retourne l'utilisateur correspondant à l'id reçu en paramètre.
	user(userId: ID!) : User
}

type Mutation {
	# Permet de mettre à jour les informations de l'utilisateur avec les informations reçues en paramètre.
	updateUser(user: UserInputUpdate!): User
}

type User implements Person {
	id: ID!
	firstname: String!
	lastname: String!
	email: String!
	image: String
	# Tableau contenant tous les producteur que la personne suit.
	followingProducers: ProducerConnection! @connection
	# Booléen valant true si l'email a été validé par le membre, false sinon.
	emailValidated: Boolean!
	isAdmin: Boolean!
}

input UserInputAdd {
	firstname: String!
	lastname: String!
	email: String!
	password: String!
	image: String
}

input UserInputUpdate {
	id: ID!
	firstname: String
	lastname: String
	image: String
}

type UserConnection {
	pageInfo: PageInfo!
	edges: [UserEdge!]!
	totalCount: Int!
}

type UserEdge {
	node: User!
	cursor: String!
}
