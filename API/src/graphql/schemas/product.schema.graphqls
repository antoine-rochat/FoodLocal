type Query {
	#Retourne tous les produits de la base de données
	products: [Product!]! #FIXME: ajouter pagination
	#Retourne le produit correspondant à l'ide reçu en paramètre. Retourne null s'il n'existe pas dans la base de données.
	product(product: ProductInputGetAndDelete!) : Product


	#Retourne tous les type de produits de la base de données
	productTypes: [ProductType!]! #FIXME: ajouter pagination
	#Retourne le produit correspondant à l'ide reçu en paramètre. Retourne null s'il n'existe pas dans la base de données.
	productType(productType: ProductTypeInputGetAndDelete!): ProductType


	#Retourne toutes les catégories de produits de la base de données
	productTypeCategories: [ProductTypeCategory!]! #FIXME: ajouter pagination
	#Retourne la catégorie de produits correspondant à l'ide reçu en paramètre. Retourne null si elle n'existe pas dans la base de données.
	productTypeCategory(productTypeCategory: ProductTypeCategoryInputGetAndDelete!): ProductTypeCategory
}

type Mutation {
	#Ajoute un nouveau produit à la base de données. Si le champ 'productType' ne contient pas de champ 'id', un nouveau productType est automatiquement ajouté à la base de données. Si le champ 'productType.category' ne contient pas de champ 'id', une nouvelle category est automatiquement ajoutée à la base de données.
	addProduct(product: ProductInputAdd!): Product!
	#Met à jour les informations du produit passé en paramètre. Ne modifie pas les informations du 'productType', ni celle du 'productType.category'
	updateProduct(product: ProductInputUpdate!): Product
	#Supprime le produit correspondant à l'id passée en paramètre. Ne supprime pas le 'productType'.
	deleteProduct(product: ProductInputGetAndDelete!): Product


	#Ajoute un nouveau type de produit à la base de données. N'ajoute rien si le type de produit reçu contient un id.
	addProductType(productType: ProductTypeInputAdd!): ProductType!
	#Ajoute le producteur reçu en paramètre à la liste des producteurs proposant des produits du productType également reçu en paramètre.
	addProducerProducingThisProductType(productTypeId: ProductTypeInputGetAndDelete!, producerId: ProducerInputGetAndDelete!): ProductType!
	#Met à jour les informations du type de produit passé en paramètre.
	updateProductType(productType: ProductTypeInputUpdate!): ProductType
	#Supprime le type de produit reçu en paramètre.
	deleteProductType(productType: ProductTypeInputGetAndDelete!): ProductType


	#Ajoute une nouvelle catégorie de produits à la base de données. N'ajoute rien si la catégorie de produits reçue contient un id.
	addProductTypeCategory(productTypeCategory: ProductTypeCategoryInputAdd!): ProductTypeCategory!
	#Met à jour les informations de la catégorie de produits passée en paramètre.
	updateProductTypeCategory(productTypeCategory: ProductTypeCategoryInputUpdate!): ProductTypeCategory
	#Supprime la catégorie de produits reçue en paramètre.
	deleteProductTypeCategory(productTypeCategory: ProductTypeCategoryInputGetAndDelete!): ProductTypeCategory
}

type Product {
	id: ID!
	description: String
	productType: ProductType!
	# FIXME: est-ce qu'on enregistre aussi l'ID du producteur pour avoir le lien dans les 2 sens?
}

input ProductInputAdd {
	description: String
	productType: ProductTypeInputGetAndDelete!
}

input ProductInputUpdate {
	id: ID!
	description: String
	productType: ProductTypeInputGetAndDelete!
}

input ProductInputGetAndDelete {
	id: ID!
}

type ProductType {
	id: ID!
	name: String!
	image: String # fixme: faudra l'encoder en base64
	category: ProductTypeCategory!
	producers: [Producer!]! # contient la liste de tous les producers proposant ce type de produits
}

input ProductTypeInputAdd {
	name: String!
	image: String
	category: ProductTypeCategoryInputGetAndDelete! #fixme: on ne peut pas ajouter une catégorie en même temps qu'un type de produit, ok?
}

input ProductTypeInputUpdate {
	id: ID!
	name: String!
	image: String
	category: ProductTypeCategoryInputGetAndDelete! #fixme: on ne peut pas mettre à jour une catégorie en même temps qu'un type de produit, ok?
}

input ProductTypeInputGetAndDelete {
	id: ID!
}

type ProductTypeCategory{
	id: ID!
	name: String!
	image: String # fixme: faudra l'encoder en base64
}

input ProductTypeCategoryInputAdd {
	name: String!
	image: String # fixme: faudra l'encoder en base64
}

input ProductTypeCategoryInputUpdate {
	id: ID!
	name: String!
	image: String # fixme: faudra l'encoder en base64
}

input ProductTypeCategoryInputGetAndDelete {
	id: ID!
}
