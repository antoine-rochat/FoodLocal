type Query {
	# Retourne tous les producteurs.
	producers: [Producer!]!

	# Retourne le producteur correspondant à l'id reçu. Retourne null si aucun producteur ne possède cet id.
	producer(producerId: ID!) : Producer

	# Retourne tous les producteurs attendant d'être validés par un administrateur (isValidated = false).
	producersWaitingForValidation: [Producer!]!

	# Retourne tous les producteurs produisant au moins un produit du type correspondant à un des ids du tableau reçu en paramètre.
	filterProducers(byProductTypeIds: [ID!]): [Producer!]!
}

type Mutation {
	# Valide le producteur correspondant au producerId si le booléen validationState vaut true, l'invalide s'il vaut false.
	validateAProducer(producerId: ID!, validationState: Boolean!): Producer!

	# Ajoute un nouveau producteur avec les informations passées en paramètre.
	addProducer(producer: ProducerInputAdd!): Producer!

	# Met à jour les informations du producteur reçu en paramètre. Retourne null si ce producteur n'existe pas.
	updateProducer(producer: ProducerInputUpdate!): Producer

	# Supprime le producteur correspondant à l'id reçu en paramètre. Retourne null si l'id reçu ne correspond à aucun producteur.
	deleteProducer(producerId: ID!): Producer
}

type Producer implements Person {
	id: ID!
	firstname: String!
	lastname: String!
	email: String!
	password: String!
	image: String
	followingProducers: [Producer!]!
	emailValidated: Boolean!
	isAdmin: Boolean!
	followers: [Person!]!
	phoneNumber: String
	description: String
	website: String
	salespoint: SalesPoint
	isValidated: Boolean! # validation côté serveur uniquement
	products: [Product!]!
	rating: ProducerRating
}

type ProducerRating {
	nbRatings: Int!
	rating: Float!
}

input ProducerInputAdd {
	# id: ID!
	firstname: String!
	lastname: String!
	email: String!
	password: String!
	image: String
	# followingProducersIds:[ID!]!
	# emailValidated: Boolean!
	# isAdmin: Boolean!
	# followersIds: [ID!]!
	phoneNumber: String
	description: String
	website: String
	salespoint: SalesPointInputAdd
	# isValidated: Boolean!
	products: [ProductInputAdd!] # pas obligatoire si vide
	# FIXME: est-ce qu'on veut vraiment pouvoir mettre à jour les produits en même temps que le producteur? On a ptetre meilleur temps de ne pas donner accès à cette liste autrement que via addproduct / deleteProduct et updateProduct...
}

input ProducerInputUpdate {
	id: ID!
	firstname: String!
	lastname: String!
	email: String!
	password: String!
	image: String
	followingProducersIds:[ID!] # pas obligatoire si vide
	# emailValidated: Boolean! # ne peut pas être modifié par le client
	# isAdmin: Boolean! # ne peut pas être modifié par le client
	followersIds: [ID!] # pas obligatoire si vide
	phoneNumber: String
	description: String
	website: String
	salespoint: SalesPointInputUpdate
	# isValidated: Boolean! # ne peut pas être modifié par le client # FIXME: à voir comment vérifier via mail...
	products: [ProductInputUpdate!] # pas obligatoire si vide
	# FIXME: est-ce qu'on veut vraiment pouvoir mettre à jour les produits en même temps que le producteur? On a ptetre meilleur temps de ne pas donner accès à cette liste autrement que via addproduct / deleteProduct et updateProduct...
}
