openapi: "3.0.1"
info:
  version: 0.0.1
  title: Local Food
  description: Une API pour le site internet foodlocal.ch crée avec la spécification OpenAPI 3.0.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Local Food Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: http://foodlocal.ch/api/v1/
  description: Serveur de production.
- url: http://beta.foodlocal.ch/api/v1/
  description: Serveur de Beta.
- url: http://tests.foodlocal.ch/api/v1/
  description: Serveur de tests.
paths:
  /products:
    get:
      tags: [products, producer]
      summary: Retourne tous les produits de la base de données.
      description: Retourne tous les produits de la base de données.
      operationId: getProducts
      parameters:
        - name: tags
          in: query
          description: Tags à utiliser pour filtrer les résultats.
          required: false
          allowEmptyValue: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: Nombre maximum de produits à retourner.
          required: false
          allowEmptyValue: false
          deprecated: false
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Numéro de la page à retourner. Permet par exemple de récupérer la 3ème page de 20 produits, soit les produits 41 à 60.
          required: false
          allowEmptyValue: false
          deprecated: false
          style: form
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Réponses contenant tous les produits de la base de données.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags: [products]
      summary: Ajoute un nouveau produit dans la base de données.
      description: Ajoute un nouveau produit dans la base de données. Doublons autorisés!
      operationId: addProduct
      requestBody:
        description: Produit à ajouter à la base de données.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200':
          description: Réponse à l'ajout du produit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /products/{id}:
    get:
      tags: [products]
      summary: Retourne le produit correspondant à l'id reçu.
      description: Retourne le produit correspondant à l'id reçu.
      operationId: getProductById
      parameters:
      - name: id
        in: path
        description: l'id du produit à récupérer
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Réponse contenant le produit recherché.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags: [products]
      summary: Met à jour le produit possédant l'id reçu.
      description: Met à jour le produit possédant l'id reçu.
      operationId: updateProduct
      parameters:
      - name: id
        in: path
        description: l'id du produit à mettre à jour.
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Produit à mettre à jour dans la base de données.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200':
          description: Réponse à l'ajout du produit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags: [products]
      summary: Supprime le produit correspondant à l'id reçu.
      description: Supprime le produit correspondant à l'id reçu.
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        description: l'id du produit à supprimer
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: Produit supprimé
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /producers:
    get:
      tags: [producer]
      summary: Retourne tous les producteurs de la base de données.
      description: Retourne tous les producteurs de la base de données.
      operationId: getProducer
      parameters:
      - name: tags
        in: query
        description: Tags à utiliser pour filtrer les résultats.
        required: false
        allowEmptyValue: false
        style: form
        schema:
          type: array
          items:
            type: string
      - name: limit
        in: query
        description: Nombre maximum de producteurs à retourner.
        required: false
        allowEmptyValue: false
        deprecated: false
        style: form
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        description: Numéro de la page à retourner. Permet par exemple de récupérer la 3ème page de 20 producteurs, soit les producteurs 41 à 60.
        required: false
        allowEmptyValue: false
        deprecated: false
        style: form
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Réponses contenant tous les producteurs de la base de données.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/producerWithProducts'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags: [producer]
      summary: Crée un nouveau producteur dans la base de données.
      description: Crée un nouveau producteur dans la base de données. Doublons autorisés!
      operationId: addProducer
      requestBody:
        description: producteur à ajouter à la base de données.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/producerWithProducts'
      responses:
        '200':
          description: Réponse à l'ajout du producteur.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/producerWithProducts'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /producers/{id}:
    get:
      tags: [producer]
      summary: Retourne le producteur correspondant à l'id reçu.
      description: Retourne le producteur correspondant à l'id reçu.
      operationId: getProducerById
      parameters:
      - name: id
        in: path
        description: L'id du producteur à récupérer.
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Réponse contenant le producteur recherché.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/producerWithProducts'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags: [producer]
      summary: Met à jour le producteur possédant l'id reçu.
      description: Met à jour le producteur possédant l'id reçu.
      operationId: updateProducer
      parameters:
      - name: id
        in: path
        description: l'id du producteur à mettre à jour.
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: producteur à mettre à jour dans la base de données.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/producerWithProducts'
      responses:
        '200':
          description: Réponse à l'ajout du producteur.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/producerWithProducts'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags: [producer]
      summary: Supprime le producteur correspondant à l'id reçu.
      description: Supprime le producteur correspondant à l'id reçu.
      operationId: deleteProducer
      parameters:
      - name: id
        in: path
        description: L'id du producteur à supprimer.
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: producteur supprimé.

        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /salesPoints:
    get:
      tags: [producer, salesPoints]
      summary: Retourne tous les points de vente de la base de données.
      description: Retourne tous les points de vente de la base de données.
      operationId: getsalesPoints
      parameters:
      - name: tags
        in: query
        description: Tags à utiliser pour filtrer les résultats.
        required: false
        allowEmptyValue: false
        style: form
        schema:
          type: array
          items:
            type: string
      - name: limit
        in: query
        description: Nombre maximum de points de vente à retourner.
        required: false
        allowEmptyValue: false
        deprecated: false
        style: form
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        description: Numéro de la page à retourner. Permet par exemple de récupérer la 3ème page de 20 points de ventes, soit les points de vente 41 à 60.
        required: false
        allowEmptyValue: false
        deprecated: false
        style: form
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Réponses contenant tous les points de ventes de la base de données.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/salesPoint'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags: [producer, salesPoints]
      summary: Crée un nouveau point de vente dans la base de données.
      description: Crée un nouveau point de vente dans la base de données. Doublons autorisés!
      operationId: addsalesPoints
      requestBody:
        description: Point de vente à ajouter à la base de données.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/salesPoint'
      responses:
        '200':
          description: Réponse à l'ajout du point de vente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/salesPoint'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /salesPoints/{id}:
    get:
      tags: [producer, salesPoints]
      summary: Retourne le points de vente correspondant à l'id reçu.
      description: Retourne le point de vente correspondant à l'id reçu.
      operationId: getsalesPointById
      parameters:
      - name: id
        in: path
        description: L'id du point de vente à récupérer.
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Réponse contenant le point de vente recherché.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/salesPoint'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags: [producer, salesPoints]
      summary: Met à jour le point de vente possédant l'id reçu avec les données reçues.
      description: Met à jour le point de vente possédant l'id reçu avec les données reçues.
      operationId: updatesalesPoint
      parameters:
      - name: id
        in: path
        description: l'id du point de vente à mettre à jour.
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: point de vente à mettre à jour dans la base de données. Attention, l'ensemble des informations de ce point de vente seront remplacées par celles reçues!
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/salesPoint'
      responses:
        '200':
          description: Réponse à la modification du point de vente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/salesPoint'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags: [producer, salesPoints]
      summary: Supprime le point de vente correspondant à l'id reçu.
      description: Supprime le point de vente correspondant à l'id reçu.
      operationId: deletesalesPoint
      parameters:
      - name: id
        in: path
        description: L'id du point de vente à supprimer.
        required: true
        allowEmptyValue: false
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: point de vente supprimé.

        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

components:
  schemas:
    product:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        image:
          type: string
          format: binary
        category:
          type: string
          description: Exemples de catégories':' fruits, légumes, viande, fromages,...
        type:
          type: string
          description: Exemples de types':' pomme, tomate, boeuf, Gruyère,...
        availableFrom:
          type: string
          format: date
        availableUntil:
          type: string
          format: date

    producerWithoutProducts:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        image:
          type: string
          format: binary
        phoneNumber:
          type: string
        email:
          type: string
        isValidated:
          type: boolean
        password:
          type: string
          format: password
        products:
          type: array
          description: Tableau contenant les informations complètes de tous les produits vendus par ce producteur.
          items:
            $ref: '#/components/schemas/product'
        salesPoints:
          type: array
          description: Tableau contenant les informations complètes de tous les points de vente de ce producteur.
          items:
            $ref: '#/components/schemas/salesPoint'

    producerWithProducts:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        image:
          type: string
          format: binary
        phoneNumber:
          type: string
        email:
          type: string
        isValidated:
          type: boolean
        password:
          type: string
          format: password
        products:
          type: array
          description: Tableau contenant les informations complètes de tous les produits vendus par ce producteur.
          items:
            $ref: '#/components/schemas/product'
        salesPoints:
          type: array
          description: Tableau contenant les informations complètes de tous les points de vente de ce producteur.
          items:
            $ref: '#/components/schemas/salesPoint'

    salesPoint:
      type: object
      description: Lieu où les produits du producteurs sont vendus.
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        type:
          type: string
        number:
          type: string
        street:
          type: string
        city:
          type: string
        postalCode:
          type: integer
          format: int32
        country:
          type: string
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
        schedule:
          type: array
          items:
            $ref: '#/components/schemas/schedule'

    schedule:
      type: object
      description: Horaires complets du point de vente.
      properties:
        id:
          type: integer
          format: int32
        description:
          format: string
        dailySchedule:
          type: array
          maxItems: 7
          items:
            $ref: '#/components/schemas/dailySchedule'

    dailySchedule:
      type: object
      description: Horaires effectués pour ce 'weekday'.
      properties:
        id:
          type: integer
          format: int32
        weekday:
          type: string
        openingHourAM:
          type: string
          format: date-time
        openingHourPM:
          type: string
          format: date-time
        closingHourAM:
          type: string
          format: date-time
        closingHourPM:
          type: string
          format: date-time

    error:
      required:
      - code
      - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
